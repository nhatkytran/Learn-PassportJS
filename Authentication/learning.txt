---
app.use(express.json());
--> Parse incoming JSON data from HTTP requests

app.use(express.urlencoded({ extended: < Boolean > }));
--> Parse incoming data encoded in the 'application/x-www-form-urlencoded' format \
such as form submission
< Boolean >
--> true --> the parsed data can contain rich objects and arrays
--> false --> the parsed data can only contain string values

--> 'SIGTERM' event allows the server to gracefully shut down in response to \
a termination signal, ensuring that data and resources are not lost or corrupted
---

--- Mongoose v/s MongoDB Driver
Both Mongoose and the MongoDB driver allow for interacting with a MongoDB database \
in a Node.js application. However, Mongoose offers several advantages over the \
MongoDB driver that make it a popular choice for many developers. Here are a few \
reasons why:
--> Simplicity: Mongoose provides an easier way to interact with the database \
by defining models with data validations and custom methods. The MongoDB driver, \
on the other hand, requires the developer to define all the database-level \
validation and business logic from scratch, which can be complex and \
time-consuming
--> Data modeling: Mongoose provides a layer of abstraction over MongoDB that \
makes data modeling and schema definition easier. It allows you to define your \
data models with data types, relationships, and validations, which makes it easier \
to work with your data
--> Data transformation: Mongoose allows you to transform the data before it is \
returned from the database. This feature makes it easy to convert the stored data \
into the format that your application needs without modifying the original data
--> Middleware: Mongoose provides middleware functions that can be executed before \
or after certain events, such as saving or deleting a document from the database. \
These middleware functions can be used to perform additional processing on the data \
or to trigger other events
--> Query building: Mongoose provides a query building API that makes it easy to \
construct complex queries with less code. The MongoDB driver requires the developer \
to write a lot of code to construct complex queries
In summary, while both Mongoose and the MongoDB driver allow for interacting with \
a MongoDB database, Mongoose provides a higher level of abstraction and offers \
features such as data modeling, data transformation, middleware, and query building \
that make database interactions easier and more efficient
---

--> What is PassportJS?

--> Passport Strategy --> A middleware connecting to the bigger PassportJS middleware
--> All about PassportJS is middlewares that integrates within your ExpressJS application \
and handles all the authentication logic using the specific strategy we choose to plug into \
the PassportJS framework
--> PassportJS throw 401 Unauthorized

--> Express Sessions

--> PassoprtJS Local Strategy uses Express Session under the hood

--> npm install express-session
--> npm install connect-mongo

---
const session = require('express-session');
const connectMongo = require('connect-mongo');
const MongoStore = connectMongo(session);
---

--> What is the difference between a session and a cookie?
--> Basically, a session and a cookie are different in the places that their data \
is stored
+ A cookie has its data stored in the browser and the browser is going to attach that \
cookie key value pair to every http request that it does
+ A session on the other hand is going to be stored on the server side (the ExpressJS \
application) --> Express Session is going to store a little bit bigger types of data

--> Store credentials data in Express Session, not in cooke --> Security purpose
--> Session is stored on server side and we can authenticate into the session with a \
secret key

---

--> A session and a cookie are both used to store information that can be retrieved \
by a server, but they work in different ways and have different purposes

--> A session is a way to keep track of user activity on a website during a single visit \
or "session." When a user opens a website, a unique session ID is generated by the server \
and sent to the user's browser in the form of a cookie. This session ID acts like a key \
that allows the server to track the user's actions on the site as they navigate from page \
to page. The server can use this information to personalize the user's experience, \
remember user preferences, and keep track of items in a shopping cart. When the user \
closes their browser or the session expires, the session data is deleted

--> A cookie, on the other hand, is a small text file that is stored on a user's computer \
by a website. Cookies are typically used to store information about site preferences, \
login information, and other details that help personalize the user's experience. \
Unlike a session, a cookie can persist even after the user closes their browser, \
allowing the website to recognize the user on subsequent visits. Cookies can also be used \
to track user behavior across multiple websites for advertising or analytics purposes

--> In summary, a session is used to keep track of a user's activity within a single \
visit to a website, while a cookie is used to store information that persists across \
multiple visits

---

--> Establish a new session --> Make a http request to the application --> session middleware \
is going to kind of fire and create a session --> create a SessionID stored in browser's cookie


---

--> What is the difference between Express Session and Json Web Tokens?

--> Express Session --> Stateful --> Require storing session data on a server
--> Json Web Tokens (JWTs) --> Stateless --> Doesn't require sotring data on a server

--> Both Express Session and JSON Web Tokens (JWTs) are commonly used for web authentication \
and session management, but they differ in how they store and share session data

--> Express Session is a server-side session management system built into the Express \
web framework for Node.js. It stores session data on the server and assigns each session \
a unique session ID. This session ID is then sent to the client as a cookie, and \
subsequent client requests include the session ID in a cookie header. The server uses \
this session ID to lookup and retrieve the associated session data from its storage. \
This is an example of a server-side session management system

--> JSON Web Tokens (JWTs), on the other hand, are a stateless way of transmitting \
information between parties as a JSON object. JWTs consist of a header, payload, and \
signature that are base64 encoded and concatenated with periods. They are often used in \
web authentication to transmit user data between the client and server as a compact and \
URL-safe string. Because JWTs are self-contained and contain all the necessary \
information to validate and authenticate the user, they do not require the server to \
store any session data. This is an example of a token-based authentication system

--> In summary, Express Session is a server-side session management system that uses \
a session ID stored as a cookie on the client to retrieve session data from the server, \
while JSON Web Tokens are a self-contained token-based authentication system that do not \
require storing session data on the server

+++ Basically how the Express Session works +++

--> Client sends request to Server --> Server checks cookie to get sessionID
+ Server has sessionID and it is valid --> Find that session --> Use the information in that session \
  --> set new cookie with the same sessionID with new expires property
+ Server can't find cookie or sessionID not found or expires --> Create new session and send new cookie

+++ Implementation of Passport Local Strategy +++

npm install passport
npm install passport-local

--> User model
--> create passport.js

--> Define the strategy
--> Define the verify callback of the Passport Local strategy

---
const customFields = {
  usernameField: 'uname',
  passwordField: 'pw'
};

const varifyCallback = (username, password, done) => {
  User.findOne({ username: username })
    .then(user => {
      if (!user) return done(null, false);

      const isValid = validPassword(password, user.hash, user.salt);
      
      if (isValid) return done(null, user);
      else return done(null, false);
    })
    .catch(error => done(error));
};

const startegy = new LocalStrategy(customFields, verifyCallback);

passport.use(strategy);

passport.serializeUser((user, done) => {
  done(null, user.id);
});
passport.deserializeUser((userId, done) => {
  User.findById(userId)
    .then((user) => {
      done(null, user);
    })
    .catch(error => done(error));
});
---

--> authRoute.js
--> authController.js

---
// passport.authenticate('local')
router.post('/login', passport.authenticate('local'), (req, res, next) => {});
---

--> app.js

---
// app.use(session(sessionOptions))
require('./config.passport');

app.use(passport.initialize());
--> Passport initializes its Authentication strategies
--> Mounts its middleware to request handling chain

app.use(passport.session());
--> Maintain the user's session
--> Persist the user's authenticated state across all requests
---

--> Register

---
router.post('/register', (req, res, next) => {
  const { salt, hash } = genPassword(req.body.pw);

  const newUser = new User({
    username: req.body.uname,
    hash: hash,
    salt: salt
  });

  newUser.save()
    .then((user) => {
      console.log(user);
    });

  re.redirect('/login');
});
---

---
router.post('/login', passport.authenticate('local', {
  failureRedirect: 'login-failure',
  successRedirect: 'login-success'
}));
---

+++ Passport Serialize and Deserialize Configuration +++

---
app.use((req, res, next) => {
  console.log(req.session); // created by express-session
  console.log(req.user); // created by passport

  next();
});
---

--> isAuth and isAmin

--> test req.session.cookie and req.session.passport
--> test throw error in Verify Callback
